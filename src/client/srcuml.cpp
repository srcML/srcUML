/**
 * @file srcuml.hpp
 *
 * @copyright Copyright (C) 2015-2016 srcML, LLC. (www.srcML.org)
 *
 * This file is part of srcUML.
 *
 * srcUML is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * srcUML is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with srcUML.  If not, see <http://www.gnu.org/licenses/>.
 */

 /*

  Count each the occurrences of each srcML element.

  Input: input_file.xml
  Useage: srcuml input_file.xml
  
  */

#include <srcuml_handler.hpp>
#include <boost/program_options.hpp>

#include <iostream>
#include <fstream>
#include <algorithm>

/**
 * main
 * @param argc number of arguments
 * @param argv the provided arguments (array of C strings)
 * 
 * Invoke srcSAX handler to generate yUML.
 */
int main(int argc, char * argv[]) {

	std::ostream * out = &std::cout;
	std::string input_file;
	std::string type = "svg_sugiyama";
	bool methods = true;
	bool attributes = true;

	try {

		namespace po = boost::program_options;

		po::options_description desc("Usage: srcuml input_file.xml [-flags]");
		desc.add_options()
			("help,h", "Produce help message")
			("output,o", po::value<std::string>(), "Set output file")
			("input", po::value<std::string>(), "An xml file generated by srcML")
			("type,t", po::value<std::string>(), "Type of output. Can be {\nsvg_multi\nsvg_three\nsvg_sugiyama,\ndot,\nyuml\n} Default: svg_sugiyama")
			("method,m", po::value<bool>(), "Boolean for turning methods on and off")
			("attribute,a", po::value<bool>(), "Boolean for turning attributes on and off")
		;

		po::positional_options_description p;
		p.add("input", -1);

		po::variables_map vm;        
		po::store(po::command_line_parser(argc, argv).options(desc).positional(p).run(), vm);
		po::notify(vm);    

		if(vm.count("help")){
			std::cout << desc << "\n";
			return 0;
		}

		if(vm.count("input")){
			std::cout << "Input file is: " << vm["input"].as<string>() << ".\n";
			input_file = vm["input"].as<std::string>();
		}else{
			std::cout << "Error: Require an input file.\nUsage: srcuml input_file.xml [-flags]\n";
			return 1;
		}

		if(vm.count("output")){
			std::string temp = vm["output"].as<std::string>();
			std::cout << "Ouput file is: " << vm["output"].as<std::string>() << ".\n";
			out = new std::ofstream(vm["output"].as<std::string>());
		}else{
			std::cout << "Using cout as default output.\n";
		}

		if(vm.count("type")){
			type = vm["type"].as<std::string>();
			std::cout << "Type: " << type << std::endl;
		}

		if(vm.count("method")){
			methods = vm["method"].as<bool>();
		}

		if(vm.count("attribute")){
			attributes = vm["attribute"].as<bool>();
		}

	} catch(std::exception& e) {
		std::cerr << "Error: " << e.what() << "\n";
		return 1;

	} catch(...) {
		std::cerr << "Exception of unknown type!\n";
	}

	try {
		srcuml_handler handler(input_file.c_str(), *out, methods, attributes, type);
	} catch(std::string& e) {
		std::cout << e << std::endl;
	}


	if(out != &std::cout)
		delete out;

	return 0;
}
